@page
@model ba_Vofpffs.Pages.FileEntryVisualPageModel
@{
    ViewData["Title"] = "FileEntryVisualPage";
}

<script src="https://d3js.org/d3.v4.js"></script>
<link href="~/lib/css/bootstrap.css" rel="stylesheet" />

@*<select id="selector" class="custom-select"></select>*@
<svg id="FileEntryChart" height="600" width="800"></svg>

<script>
    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");


    d3.json("api/upload", function (error, classes) {
        if (error)
            throw error;
        else
            console.log(classes);

        var color = d3.scaleOrdinal(d3.schemeCategory20c);

        var radiusScale = d3.scaleSqrt()
            .domain([d3.min(classes, function (d) { return d.size; }), d3.max(classes, function (d) { return d.size; })])
            .range([10, 100]);

        var simulation = d3.forceSimulation()
            .force("x", d3.forceX(width / 2).strength(0.1))
            .force("y", d3.forceY(height / 2).strength(0.1))
            .force("collide", d3.forceCollide(function (d) { return radiusScale(d.size) + 1; }));

        var nodes = svg.selectAll("g")
            .data(classes)
            .enter()
            .append("circle")
            .attr("class", "circle")
            .attr("r", function (d) { return radiusScale(d.size); })
            .attr("id", function (d) { return d.id; })
            .attr("fill", function (d) { return color(d.ipAddress); });

        nodes.append("title")
            .text(function (d) {
                return "Name : " + d.hash + "\n" +
                    "Size : " + d.size + "Byte" + "\n" +
                    "IPAddres : " + d.ipAddress + "\n" +
                    "DateTime : " + d.dateTime;
            });

        simulation.nodes(classes).on("tick", ticked);

        function ticked() {
            nodes
                .attr("cx", function (d) { return d.x; })
                .attr("cy", function (d) { return d.y; })
        };
    });


    //d3.json("api/upload", function (error, classes) {
    //    if (error) throw error;

    //    var nestedIPs = d3.nest()
    //        .key(function (d) { return d.ipAddress; })
    //        .rollup(function (d) { return d.length; })
    //        .entries(classes);

    //    nestedIPs.unshift({
    //        "key": "ALL", "value": d3.sum(nestedIPs, function (d) { return d.value; })
    //    });

    //    var selector = d3.select("#selector");

    //    selector.selectAll("option")
    //        .data(nestedIPs)
    //        .enter()
    //        .append("option")
    //        .text(function (d) { return d.key + "-> File Count : " + d.value; })
    //        .attr("value", function (d) { return d.key; });

    //    selector.on("change", function () {
    //        d3.selectAll("g")
    //            .attr("opacity", 1.0);

    //        var value = selector.property("value");

    //        if (value != "ALL") {

    //            d3.selectAll("g")
    //                .filter(function (d) { return d.ipAddress != value; })
    //                .attr("opacity", 0.1);
    //        }
            
    //    });

    //    var nodes = svg.selectAll("g")
    //        .data(classes)
    //        .enter()
    //        .append("g")
    //        .attr("class", function (d) { return d.ipAddress; })
    //        .attr("transform", function (d) { return "translate(10, 10)"; })
    //        .attr("r", function (d) { return d.size / 1024; })
    //        .style("fill", "blue");

    //    nodes.append("circle")
    //        .attr("id", function (d) { return d.id; })
    //        .attr("r", function (d) { return d.size / 1024; })
    //        .style("fill", "red");
    //});
</script>
