@page
@model ba_Vofpffs.Pages.FileEntryVisualPageModel
@{
    ViewData["Title"] = "FileEntryVisualPage";
}

<script src="https://d3js.org/d3.v4.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<link href="~/lib/css/bootstrap.css" rel="stylesheet" />

@*<select id="selector" class="custom-select"></select>*@

<style>
    .grid-container {
        display: grid;
        grid-template-columns: 60% 40%;
        grid-auto-rows: 1fr;
        height: 100%;
        width: 100%;
    }

    .grid-item {
        /*background-color: rgba(255, 255, 255, 0.8);
        font-size: 16px;
        text-align: center;*/
    }

    .svg {
        height: inherit;
        width: inherit;
    }
</style>

<div class="grid-container" onload="renderChart()">
    <div id="FileEntryChart" class="grid-item">

    </div>
    @*<svg id="FileEntryChart" class="grid-item svg"></svg>*@

    <div id="FileEntryInspector" class="grid-item">

    </div>
</div>


<script>

    $(document).ready(function () {
        renderChart();
    });

    $(window).resize(function () {
        
        renderChart();
        console.log("resize");
    });

    function renderChart() {

        d3.json("api/upload", function (error, classes) {
            if (error)
                throw error;
            else
                console.log(classes);

            // ugly Code 
            var svgDiv = document.getElementById("FileEntryChart");
            while (svgDiv.firstChild) {
                svgDiv.removeChild(svgDiv.firstChild);
            }
            var svg = d3.select(svgDiv).append("svg");

            var width = svgDiv.clientWidth;
            var height = svgDiv.clientHeight;

            svg.attr("width", width).attr("height", height);

            // ->
            var color = d3.scaleOrdinal(d3.schemeCategory20c);

            var radiusScale = d3.scaleSqrt()
                .domain([d3.min(classes, function (d) { return d.size; }), d3.max(classes, function (d) { return d.size; })])
                .range([10, 100]);


            var nested = d3.nest()
                .key(function (d) { return d.ipAddress; })
                .entries(classes);

            // create a root Node for the Tree Structure
            var root = { key: "rootNode", children: [] };

            // create Parent Elements for each Nested Attribute 
            nested.forEach(function (element) {

                root.children.push({ key: element.key, children: element.values });
            });

            // creating the hierarchy structure for the TreeMap
            var test = d3.hierarchy(root)
                .eachBefore(function (d) { d.data.id = d.data.id; })
                .sum(function (d) { return radiusScale(d.size); })
                .sort(function (a, b) { return b.size - a.size; });

            var treemap = d3.treemap()
                .size([width, height])
                .round(true)
                .paddingInner(2)
                .paddingOuter(2)
                .paddingTop(20);

            treemap(test);
            console.log(test.descendants());

            // Appending all Tree Descenmdants to the svg
            var cell = svg.selectAll(".node")
                .data(test.descendants())
                .enter()
                .append("g")
                .attr("transform", function (d) { return "translate(" + d.x0 + "," + d.y0 + ")"; })
                .attr("class", "node")
                .each(function (d) { d.node = this; })

            // Appending rectangles for all Tree Members
            cell.append("rect")
                .attr("id", function (d) { return d.data.id; })
                .attr("width", function (d) { return d.x1 - d.x0; })
                .attr("height", function (d) { return d.y1 - d.y0; })
                .attr("fill", function (d) {

                    if (d.parent)
                        return color(d.parent.data.key);
                    else
                        return color("root");
                });

            // Differ leafes vs tree in Visualization
            var leafes = cell.filter(function (d) { return !d.children; })
            var tree = cell.filter(function (d) { return d.children; })

            // set OnClick for leafes 
            leafes.on("click", function (d) { console.log(d.data); })

            // Info for leafes : actuall Files
            leafes.append("title")
                .text(function (d) {
                    return "Name : " + d.data.hash + "\n" +
                        "Size : " + d.data.size + "Byte" + "\n" +
                        "IPAddres : " + d.data.ipAddress + "\n" +
                        "DateTime : " + d.data.dateTime;
                });

            leafes.append("text")
                .attr("dx", 0)
                .attr("dy", 16)
                .style("font-size", "16px")
                .text(function (d) {
                    return "Hash: " + d.data.hash;
                });

            leafes.append("text")
                .attr("dx", 0)
                .attr("dy", 28)
                .style("font-size", "12px")
                .text(function (d) {
                    return "Byte: " + d.data.size;
                });

            // Info for the Tree : nested Property
            tree.append("text")
                .attr("dx", function (d) { return 0 ; })
                .attr("dy", function (d) { return 15 ; })
                .text(function (d) {
                    return "Key: " + d.data.key;
                });
        });
    };
   
</script>
