@page
@model ba_Vofpffs.Pages.FileEntryVisualPageModel
@{
    ViewData["Title"] = "FileEntryVisualPage";
}

<script src="https://d3js.org/d3.v4.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<link href="~/lib/css/bootstrap.css" rel="stylesheet" />

@*<select id="selector" class="custom-select"></select>*@

<style>
    .grid-container {
        display: grid;
        grid-template-columns: 60% 40%;
        grid-auto-rows: 1fr;
        height: 100%;
        width: 100%;
    }

    .grid-item {
        /*background-color: rgba(255, 255, 255, 0.8);
        font-size: 16px;
        text-align: center;*/
    }

    .svg {
        height: inherit;
        width: inherit;
    }
</style>

<div class="grid-container" onload="renderChart()">
    <div id="FileEntryChart" class="grid-item">

    </div>
    @*<svg id="FileEntryChart" class="grid-item svg"></svg>*@

    <div id="FileEntryInspector" class="grid-item">

    </div>
</div>


<script>

    var test = [{ "id": 1, "hash": "DiscordSetup.exe", "file": null, "size": 52553728, "ipAddress": "::1", "headers": "Cache-Control=no-cache;Connection=Keep-Alive;Content-Type=multipart/form-data; boundary=--------------------------885966844847005459053046;Accept=*/*;Accept-Encoding=gzip, deflate;Host=localhost:53997;User-Agent=PostmanRuntime/7.1.1;Content-Length=52553955;Postman-Token=24177475-cc46-4701-b001-92352615af6c;MS-ASPNETCORE-TOKEN=7ea62999-2a09-4aee-8217-2c1d90d169a2;X-Original-Proto=http;X-Original-For=127.0.0.1:52522", "dateTime": "2018-04-25T09:48:43.3908183" }
        , { "id": 2, "hash": "FACEITInstaller_64.exe", "file": null, "size": 64619112, "ipAddress": " 2a02:8108:4a40:1018:925:a3c4:b663:7bae ", "headers": "Cache-Control=no-cache;Connection=Keep-Alive;Content-Type=multipart/form-data; boundary=--------------------------110467597745309109882910;Accept=*/*;Accept-Encoding=gzip, deflate;Host=localhost:53997;User-Agent=PostmanRuntime/7.1.1;Content-Length=265772390;Postman-Token=434031f0-3b76-43c0-b337-3bbeccd1dbee;MS-ASPNETCORE-TOKEN=7ea62999-2a09-4aee-8217-2c1d90d169a2;X-Original-Proto=http;X-Original-For=127.0.0.1:52522", "dateTime": "2018-04-25T09:49:24.2253017" }
        , { "id": 3, "hash": "GitHubDesktopSetup.exe", "file": null, "size": 80626648, "ipAddress": " 2a02:8108:4a40:1018:925:a3c4:b663:7bae ", "headers": "Cache-Control=no-cache;Connection=Keep-Alive;Content-Type=multipart/form-data; boundary=--------------------------110467597745309109882910;Accept=*/*;Accept-Encoding=gzip, deflate;Host=localhost:53997;User-Agent=PostmanRuntime/7.1.1;Content-Length=265772390;Postman-Token=434031f0-3b76-43c0-b337-3bbeccd1dbee;MS-ASPNETCORE-TOKEN=7ea62999-2a09-4aee-8217-2c1d90d169a2;X-Original-Proto=http;X-Original-For=127.0.0.1:52522", "dateTime": "2018-04-25T09:49:24.3768511" }
        , { "id": 4, "hash": "SteamSetup.exe", "file": null, "size": 1446792, "ipAddress": " 2a02:8108:4a40:1018:925:a3c4:b663:7bae ", "headers": "Cache-Control=no-cache;Connection=Keep-Alive;Content-Type=multipart/form-data; boundary=--------------------------110467597745309109882910;Accept=*/*;Accept-Encoding=gzip, deflate;Host=localhost:53997;User-Agent=PostmanRuntime/7.1.1;Content-Length=265772390;Postman-Token=434031f0-3b76-43c0-b337-3bbeccd1dbee;MS-ASPNETCORE-TOKEN=7ea62999-2a09-4aee-8217-2c1d90d169a2;X-Original-Proto=http;X-Original-For=127.0.0.1:52522", "dateTime": "2018-04-25T09:49:24.4182112" }
        , { "id": 5, "hash": "TeamViewer_Setup.exe", "file": null, "size": 14725904, "ipAddress": " 2a02:8108:4a40:1018:925:a3c4:b663:7bae ", "headers": "Cache-Control=no-cache;Connection=Keep-Alive;Content-Type=multipart/form-data; boundary=--------------------------110467597745309109882910;Accept=*/*;Accept-Encoding=gzip, deflate;Host=localhost:53997;User-Agent=PostmanRuntime/7.1.1;Content-Length=265772390;Postman-Token=434031f0-3b76-43c0-b337-3bbeccd1dbee;MS-ASPNETCORE-TOKEN=7ea62999-2a09-4aee-8217-2c1d90d169a2;X-Original-Proto=http;X-Original-For=127.0.0.1:52522", "dateTime": "2018-04-25T09:49:24.4452385" }
        , { "id": 6, "hash": "vs_Community.exe", "file": null, "size": 1037592, "ipAddress": "::1", "headers": "Cache-Control=no-cache;Connection=Keep-Alive;Content-Type=multipart/form-data; boundary=--------------------------110467597745309109882910;Accept=*/*;Accept-Encoding=gzip, deflate;Host=localhost:53997;User-Agent=PostmanRuntime/7.1.1;Content-Length=265772390;Postman-Token=434031f0-3b76-43c0-b337-3bbeccd1dbee;MS-ASPNETCORE-TOKEN=7ea62999-2a09-4aee-8217-2c1d90d169a2;X-Original-Proto=http;X-Original-For=127.0.0.1:52522", "dateTime": "2018-04-25T09:49:24.4478532" }
        , { "id": 7, "hash": "VSCodeSetup-x64-1.22.2.exe", "file": null, "size": 45426904, "ipAddress": "::1", "headers": "Cache-Control=no-cache;Connection=Keep-Alive;Content-Type=multipart/form-data; boundary=--------------------------110467597745309109882910;Accept=*/*;Accept-Encoding=gzip, deflate;Host=localhost:53997;User-Agent=PostmanRuntime/7.1.1;Content-Length=265772390;Postman-Token=434031f0-3b76-43c0-b337-3bbeccd1dbee;MS-ASPNETCORE-TOKEN=7ea62999-2a09-4aee-8217-2c1d90d169a2;X-Original-Proto=http;X-Original-For=127.0.0.1:52522", "dateTime": "2018-04-25T09:49:24.5323673" }
        , { "id": 8, "hash": "Wireshark-win64-2.4.3.exe", "file": null, "size": 57888152, "ipAddress": "::1", "headers": "Cache-Control=no-cache;Connection=Keep-Alive;Content-Type=multipart/form-data; boundary=--------------------------110467597745309109882910;Accept=*/*;Accept-Encoding=gzip, deflate;Host=localhost:53997;User-Agent=PostmanRuntime/7.1.1;Content-Length=265772390;Postman-Token=434031f0-3b76-43c0-b337-3bbeccd1dbee;MS-ASPNETCORE-TOKEN=7ea62999-2a09-4aee-8217-2c1d90d169a2;X-Original-Proto=http;X-Original-For=127.0.0.1:52522", "dateTime": "2018-04-25T09:49:24.6334846" }]

    $(document).ready(function () {
        renderChart();
    });

    $(window).resize(function () {
        
        renderChart();
        console.log("resize");
    });

    //renderChart();
    




    //svg.attr("width", x * (4 / 6));
    //svg.attr("height", y);



    //d3.json("api/upload", function (error, data) {

    //    console.log(data);

    //    var stratify = d3.stratify()
    //        .parentId(function (d) { return d.ipAddress.substring(0, d.ipAddress.lastIndexOf(".")); });

    //    var pack = d3.pack()
    //        .size([width - 2, height - 2])
    //        .padding(3);

    //    var nested = d3.nest()
    //        .key(function (d) { return d.ipAddress; })
    //        .entries(data);

    //    var root = stratify(nested)
    //        .sum(function (d) { return d.value; })
    //        .sort(function (a, b) { return b.value - a.value; });

    //    console.log(root);


    //});

    function renderChart() {

        d3.json("api/upload", function (error, classes) {
            if (error)
                throw error;
            else
                console.log(classes);

            //var w = window,
            //    d = document,
            //    e = d.documentElement,
            //    g = d.getElementsByTagName('body')[0],
            //    x = w.innerWidth || e.clientWidth || g.clientWidth,
            //    y = w.innerHeight || e.clientHeight || g.clientHeight;


            // ugly Code 
            var svgDiv = document.getElementById("FileEntryChart");
            while (svgDiv.firstChild) {
                svgDiv.removeChild(svgDiv.firstChild);
            }
            var svg = d3.select(svgDiv).append("svg");

            var width = svgDiv.clientWidth;
            var height = svgDiv.clientHeight;

            svg.attr("width", width).attr("height", height);

            console.log(width);
            console.log(height);

            // ->
            var color = d3.scaleOrdinal(d3.schemeCategory20c);

            var radiusScale = d3.scaleSqrt()
                .domain([d3.min(classes, function (d) { return d.size; }), d3.max(classes, function (d) { return d.size; })])
                .range([10, 100]);

            //var simulation = d3.forceSimulation()
            //    .force("x", d3.forceX(width / 2).strength(0.1))
            //    .force("y", d3.forceY(height / 2).strength(0.1))
            //    .force("collide", d3.forceCollide(function (d) { return radiusScale(d.size) + 1; }));


            // Circle

            //var format = d3.format(",d");

            //var root = { key: "root", children: classes };

            //var test = d3.hierarchy(root)
            //    .eachBefore(function (d) { d.data.id = d.data.id; })
            //    .sum(function (d) { return radiusScale(d.size); })
            //    .sort(function (a, b) { return b.size - a.size; });

            //var pack = d3.pack()
            //    .size([width, height])
            //    .padding(3);

            //pack(test);

            //console.log(test.descendants());

            //var nodes = svg.selectAll("g")
            //    .data(test.descendants())
            //    .enter()
            //    .append("g")
            //    .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; })
            //    .attr("class", function (d) { return "node" + (!d.children ? " node--leaf" : d.depth ? "" : " node--root"); })
            //    .each(function (d) { d.node = this; });

            //nodes.append("circle")
            //    .attr("id", function (d) { return "node " + d.data.id })
            //    .attr("r", function (d) { return d.value; })
            //    .attr("fill", function (d) { return color(d.data.ipAddress); });

            //var leafes = nodes.filter(function (d) { return !d.children; });

            //leafes.append("clipPath")
            //    .attr("id", function (d) { return "clip-" + d.data.id; })
            //    .append("use")
            //    .attr("xlink:href", function (d) { return "#node-" + d.data.id + ""; });

            //TreemAp


            // nest the Data for ipAddress
            var nested = d3.nest()
                .key(function (d) { return d.ipAddress; })
                .entries(classes);

            // create a root Node for the Tree Structure
            var root = { key: "rootNode", children: [] };

            // create Parent Elements for each Nested Attribute 
            nested.forEach(function (element) {

                root.children.push({ key: element.key, children: element.values });
            });

            // creating the hierarchy structure for the TreeMap
            var test = d3.hierarchy(root)
                .eachBefore(function (d) { d.data.id = d.data.id; })
                .sum(function (d) { return radiusScale(d.size); })
                .sort(function (a, b) { return b.size - a.size; });

            var treemap = d3.treemap()
                .size([width, height])
                .round(true)
                .paddingInner(2)
                .paddingOuter(2)
                .paddingTop(20);

            treemap(test);

            // Appending all Tree Descenmdants to the svg
            var cell = svg.selectAll(".node")
                .data(test.descendants())
                .enter()
                .append("g")
                .attr("transform", function (d) { return "translate(" + d.x0 + "," + d.y0 + ")"; })
                .attr("class", "node")
                .each(function (d) { d.node = this; })

            // Appending rectangles for all Tree Members
            cell.append("rect")
                .attr("id", function (d) { return d.data.id; })
                .attr("width", function (d) { return d.x1 - d.x0; })
                .attr("height", function (d) { return d.y1 - d.y0; })
                .attr("fill", function (d) {

                    if (d.parent)
                        return color(d.parent.data.key);
                    else
                        return color("root");
                });

            // Differ leafes vs tree in Visualization
            var leafes = cell.filter(function (d) { return !d.children; })
            var tree = cell.filter(function (d) { return d.children; })

            // Info for leafes : actuall Files
            leafes.append("title")
                .text(function (d) {
                    return "Name : " + d.data.hash + "\n" +
                        "Size : " + d.data.size + "Byte" + "\n" +
                        "IPAddres : " + d.data.ipAddress + "\n" +
                        "DateTime : " + d.data.dateTime;
                });

            // Info for the Tree : nested Property
            tree.append("text")
                .attr("dx", function (d) { return d.x0; })
                .attr("dy", function (d) { return d.y0; })
                .text(function (d) {
                    return "Key: " + d.data.key;
                });
        });

    };
    //d3.json("api/upload", function (error, classes) {
    //    if (error)
    //        throw error;
    //    else
    //        console.log(classes);

    //    var color = d3.scaleOrdinal(d3.schemeCategory20c);

    //    var radiusScale = d3.scaleSqrt()
    //        .domain([d3.min(classes, function (d) { return d.size; }), d3.max(classes, function (d) { return d.size; })])
    //        .range([10, 100]);

    //    var simulation = d3.forceSimulation()
    //        .force("x", d3.forceX(width / 2).strength(0.1))
    //        .force("y", d3.forceY(height / 2).strength(0.1))
    //        .force("collide", d3.forceCollide(function (d) { return radiusScale(d.size) + 1; }));

    //    var nodes = svg.selectAll("g")
    //        .data(classes)
    //        .enter()
    //        .append("circle")
    //        .attr("class", "circle")
    //        .attr("r", function (d) { return radiusScale(d.size); })
    //        .attr("id", function (d) { return d.id; })
    //        .attr("fill", function (d) { return color(d.ipAddress); });

    //    nodes.append("title")
    //        .text(function (d) {
    //            return "Name : " + d.hash + "\n" +
    //                "Size : " + d.size + "Byte" + "\n" +
    //                "IPAddres : " + d.ipAddress + "\n" +
    //                "DateTime : " + d.dateTime;
    //        });

    //    simulation.nodes(classes).on("tick", ticked);

    //    function ticked() {
    //        nodes
    //            .attr("cx", function (d) { return d.x; })
    //            .attr("cy", function (d) { return d.y; })
    //    };
    //});


    //d3.json("api/upload", function (error, classes) {
    //    if (error) throw error;

    //    var nestedIPs = d3.nest()
    //        .key(function (d) { return d.ipAddress; })
    //        .rollup(function (d) { return d.length; })
    //        .entries(classes);

    //    nestedIPs.unshift({
    //        "key": "ALL", "value": d3.sum(nestedIPs, function (d) { return d.value; })
    //    });

    //    var selector = d3.select("#selector");

    //    selector.selectAll("option")
    //        .data(nestedIPs)
    //        .enter()
    //        .append("option")
    //        .text(function (d) { return d.key + "-> File Count : " + d.value; })
    //        .attr("value", function (d) { return d.key; });

    //    selector.on("change", function () {
    //        d3.selectAll("g")
    //            .attr("opacity", 1.0);

    //        var value = selector.property("value");

    //        if (value != "ALL") {

    //            d3.selectAll("g")
    //                .filter(function (d) { return d.ipAddress != value; })
    //                .attr("opacity", 0.1);
    //        }

    //    });

    //    var nodes = svg.selectAll("g")
    //        .data(classes)
    //        .enter()
    //        .append("g")
    //        .attr("class", function (d) { return d.ipAddress; })
    //        .attr("transform", function (d) { return "translate(10, 10)"; })
    //        .attr("r", function (d) { return d.size / 1024; })
    //        .style("fill", "blue");

    //    nodes.append("circle")
    //        .attr("id", function (d) { return d.id; })
    //        .attr("r", function (d) { return d.size / 1024; })
    //        .style("fill", "red");
    //});
</script>
